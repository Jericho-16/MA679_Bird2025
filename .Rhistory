# df_trans_i$BEP.Tissue.Density..g.ccm._log10max <-log10(max(df_trans_i$BEP.Tissue.Density..g.ccm.+1) - df_trans_i$BEP.Tissue.Density..g.ccm.)
# df_trans_i$STB.Ash.Density..g.ccm_log10Max <- log10(max(df_trans_i$STB.Ash.Density..g.ccm.+1)-df_trans_i$STB.Ash.Density..g.ccm.)
# df_trans_i$STB.Tissue.Density..g.ccm._log10Max <- log10(max(df_trans_i$STB.Tissue.Density..g.ccm.+1)-df_trans_i$STB.Tissue.Density..g.ccm.)
# df_trans_i$STB.Mineral.._log10Max <- log10(max(df_trans_i$STB.Mineral..+1)-df_trans_i$STB.Mineral..)
# df_trans_i$STB.Organic.._log10Max <- log10(max(df_trans_i$STB.Organic..+1)-df_trans_i$STB.Organic..)
# df_trans_i$Avg.CEP...Relaxation....log10max <-log10(max(df_trans_i$Avg.CEP...Relaxation....+1) - df_trans_i$Avg.CEP...Relaxation....)
vars_to_check <- c(
"BEP.Ash.Fraction....",
"BEP.Mineral..",
"BEP.Tissue.Density..g.ccm.",
"STB.Ash.Density..g.ccm.",
"STB.Tissue.Density..g.ccm.",
"STB.Mineral..",
"STB.Organic..",
"Avg.CEP...Relaxation....",
"STB.Ash.Fraction...."
)
summary_list <- lapply(vars_to_check, function(var) {
x <- df_trans_i[[var]]
data.frame(
Variable = var,
Min = min(x, na.rm = TRUE),
Has_Zero = any(x == 0, na.rm = TRUE),
Has_Negative = any(x < 0, na.rm = TRUE),
N_Zero = sum(x == 0, na.rm = TRUE),
N_Negative = sum(x < 0, na.rm = TRUE)
)
})
summary_df <- do.call(rbind, summary_list)
print(summary_df)
library(MASS)  # for boxcox
library(e1071) # for skewness check
for (var in vars_to_check) {
# 1. Extract the variable
x <- df_trans_i[[var]]
# 2. Shift if needed
if (any(x <= 0, na.rm = TRUE)) {
shift <- abs(min(x, na.rm = TRUE)) + 0.001
x <- x + shift
}
# 3. Box-Cox find best lambda
model <- lm(I(x) ~ 1)
bc <- boxcox(model, lambda = seq(-2, 2, 0.1), plotit = TRUE, main = paste("Box-Cox for", var))
lambda_best <- bc$x[which.max(bc$y)]
# 4. Apply transformation manually
transformed_name <- paste0(var, "_boxcox")
if (lambda_best == 0) {
df_trans_i[[transformed_name]] <- log(x)
} else {
df_trans_i[[transformed_name]] <- (x^lambda_best - 1) / lambda_best
}
# 5. Optional: Print the best lambda and skewness after
cat("Variable:", var, "\n")
cat("Best Lambda:", lambda_best, "\n")
cat("Skewness after transform:", skewness(df_trans_i[[transformed_name]], na.rm = TRUE), "\n\n")
}
# Square root transformations
df_trans_i$STB.DA_sqrt <- sqrt(df_trans_i$STB.DA....)
plot_density_skew <- function(data, vars, title_text) {
df_long <- melt(data[, vars]) %>%
filter(is.finite(value)) %>%
group_by(variable) %>%
mutate(
skew = round(skewness(value, na.rm = TRUE), 2),
label = paste0(variable, "\nSkewness: ", skew[1])
)
ggplot(df_long, aes(x = value)) +
geom_density(fill = "lightblue", alpha = 0.6, color = "darkblue") +
facet_wrap(~ label, scales = "free", ncol = 4) +
labs(title = title_text, x = "Value", y = "Density") +
theme_minimal(base_size = 11) +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
}
num_vars <- colnames(df_trans_i)[sapply(df_trans_i, is.numeric)]
vars_part1 <- num_vars[1:ceiling(length(num_vars)/2)]
vars_part2 <- num_vars[(ceiling(length(num_vars)/2)+1):length(num_vars)]
# Plot them
plot1 <- plot_density_skew(df_trans_i, vars_part1, "Density Plot - Part 1")
plot2 <- plot_density_skew(df_trans_i, vars_part2, "Density Plot - Part 2")
vars_to_remove <- c(
"Apparent.Density..mg.HA.ccm.",
"BEP.BV.TV....",
"BEP.Organic..",
"BEP.Thickness..mm.",
"BEP.Water..",
"CEP.Modulus..MPa.",
"Disc.T2..ms.",
"Fracture.Strain",
"Lower.Yield.Stress..MPa.",
"Tissue.Yield.Stress..MPa.",
"Young.s.Modulus..MPa.",
"BEP.fAGEs..nq.quinine...mg.collagen.",
"CEP.Eq.Swelling.Force..N.",
"STB.Conn.D..mm..3.",
"STB.fAGEs..nq.quinine...mg.collagen.",
"STB.Tb.Sp.Mean..mm.",
"STB.Water..",
"BEP.Ash.Fraction....",
"BEP.Mineral..",
"BEP.Tissue.Density..g.ccm.",
"STB.Ash.Density..g.ccm.",
"STB.Tissue.Density..g.ccm.",
"STB.Mineral..",
"STB.Organic..",
"Avg.CEP...Relaxation....",
"STB.DA...."
)
df_trans_i <- df_trans_i[, !(colnames(df_trans_i) %in% vars_to_remove)]
properties <- df_trans_i[, !colnames(df_trans_i) %in% c("X","Sex", "Donor.ID","Endplate", "Age", "Disc.T2..ms_log","AgeGroup", "Disc.Pfirrmann")]
prop_names <- colnames(properties)
formula_string <- paste0("cbind(", paste(prop_names, collapse = ", "), ") ~ Age  + Disc.T2..ms_log")
form <- as.formula(formula_string)
mmr_model <- lm(form, data = df_trans_i)
model_summary <- summary(mmr_model)
all_overall_pvals <- data.frame()
# Loop through all models and extract overall F-test p-values
for (model_name in names(model_summary)) {
model <- model_summary[[model_name]]
if (is.null(model$fstatistic)) next
# Extract F-statistic components
fstat <- as.numeric(model$fstatistic)
# Compute overall model p-value
overall_p <- pf(fstat[1], fstat[2], fstat[3], lower.tail = FALSE)
# Store in a data frame
overall_df <- data.frame(
model = model_name,
F_statistic = fstat[1],
df1 = fstat[2],
df2 = fstat[3],
p_value = overall_p
)
# Append to results
all_overall_pvals <- bind_rows(all_overall_pvals, overall_df)
}
corrected_overall_pvals <- all_overall_pvals %>%
mutate(
p_bonferroni = p.adjust(p_value, method = "bonferroni"),
p_hommel     = p.adjust(p_value, method = "hommel"),
p_fdr        = p.adjust(p_value, method = "fdr")
) %>%
mutate(
sig_bonf_0.05  = p_bonferroni < 0.05,
sig_hommel_0.05 = p_hommel < 0.05,
sig_fdr_0.01   = p_fdr < 0.01,
sig_fdr_0.05   = p_fdr < 0.05,
sig_fdr_0.3    = p_fdr < 0.3
)
# Prepare data for plotting
plot_df <- corrected_overall_pvals %>%
dplyr::select(model, p_bonferroni, p_hommel, p_fdr) %>%
pivot_longer(
cols = c(p_bonferroni, p_hommel, p_fdr),
names_to = "method",
values_to = "adj_pval"
) %>%
group_by(method) %>%
arrange(adj_pval, .by_group = TRUE) %>%
mutate(rank = row_number())  # add x-axis rank
ggplot(plot_df, aes(x = rank, y = adj_pval)) +
geom_point(size = 2.2, alpha = 0.8,) +
scale_y_log10() + # Log scale
facet_wrap(~method, ncol = 3) +
theme_minimal(base_size = 14) +
labs(title = "Multiple Hypothesis Testing: P-value Corrections",
x = "Ordering of p-values",
y = "p-values (log scale)") +
theme(legend.position = "none")  # Remove redundant legend
df <- corrected_overall_pvals %>%
dplyr::select(model, p_value) %>%
arrange(p_value) %>%
mutate(
rank = row_number(),
log_p = p_value  # for log-scale plot
)
plot_fdr_bonf <- function(df, q_level) {
m <- nrow(df)
# BH line: (rank/m) * q
df <- df %>%
mutate(
bh_threshold = (rank / m) * q_level,
is_significant = p_value <= bh_threshold
)
ggplot(df, aes(x = rank, y = p_value)) +
geom_point(aes(color = is_significant), size = 2) +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black")) +
geom_abline(intercept = 0, slope = q_level / m, color = "orange", linetype = "solid") +  # BH line
geom_hline(yintercept = 0.05 / m, color = "green", linetype = "solid") +  # Bonferroni line
labs(
title = paste0("FDR q = ", q_level),
x = "Index (ordered p-values)",
y = "P-Value (log scale)"
) +
theme_minimal()
}
p1 <- plot_fdr_bonf(df, q_level = 0.01)
p2 <- plot_fdr_bonf(df, q_level = 0.1)
p3 <- plot_fdr_bonf(df, q_level = 0.3)
p1 + p2 + p3
resid_matrix <- residuals(mmr_model)
fitted_matrix <- fitted(mmr_model)
resid_df <- as.data.frame(resid_matrix)
resid_long <- melt(resid_df, variable.name = "Variable", value.name = "Residual")
# Q-Q plot
plot1 <- ggplot(resid_long, aes(sample = Residual)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ Variable, scales = "free", ncol = 5) +
theme_minimal(base_size = 12) +
labs(title = "Q-Q Plots of Residuals by Variable")
# residuals vs Fitted
resid_df <- melt(as.data.frame(resid_matrix), variable.name = "Variable", value.name = "Residual")
fitted_df <- melt(as.data.frame(fitted_matrix), variable.name = "Variable", value.name = "Fitted")
plot_df <- cbind(resid_df, Fitted = fitted_df$Fitted)
plot2 <- ggplot(plot_df, aes(x = Fitted, y = Residual)) +
geom_point(alpha = 0.6, color = "steelblue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
facet_wrap(~ Variable, scales = "free") +
theme_minimal(base_size = 14) +
labs(title = "Residuals vs Fitted Values (All Variables)",
x = "Fitted Values",
y = "Residuals")
plot1 #Q - Q
plot2 # R vs F
apply(resid_matrix, 2, function(x) length(unique(x[is.finite(x)])))
# mvn(resid_matrix, mvnTest = "hz")
# Fail since one column highly correlated
cor_matrix <- cor(resid_matrix, use = "pairwise.complete.obs")
find_highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.95)
# Print which variables need removed
print(find_highly_correlated)
print(colnames(resid_matrix)[find_highly_correlated])
resid_matrix_clean <- resid_matrix[, -c(31, 34, 24, 9)]
nzv <- nearZeroVar(resid_matrix)
if (length(nzv) > 0) {
resid_matrix_clean <- resid_matrix[, -nzv]
} else {
resid_matrix_clean <- resid_matrix
}
cor_matrix <- cor(resid_matrix_clean, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.90)
if (length(high_cor) > 0) {
resid_matrix_clean <- resid_matrix_clean[, -high_cor]
}
# Remove linear combinations
linear_combo <- findLinearCombos(resid_matrix_clean)
if (!is.null(linear_combo$remove)) {
resid_matrix_clean <- resid_matrix_clean[, -linear_combo$remove]
}
eigen_values <- eigen(cor(resid_matrix_clean, use = "pairwise.complete.obs"))$values
reciprocal_condition_number <- min(eigen_values) / max(eigen_values)
print(reciprocal_condition_number)  # Should not be extremely small (< 1e-10)
# 5. Now run mvn
mvn(resid_matrix_clean, mvnTest = "mardia")
View(corrected_overall_pvals)
cor_matrix <- cor(resid_matrix, use = "pairwise.complete.obs")
find_highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.99)
# Print which variables need removed
print(find_highly_correlated)
resid_matrix_clean <- resid_matrix[, -c(33, 9)]
mvn(resid_matrix_clean, mvnTest = "mardia")
mvn(resid_matrix, mvnTest = "mardia")
mvn(resid_matrix, mvnTest = "mardia")
df_trans_i$Sex <- factor(df_trans_i$Sex)
properties <- df_trans_i[, !colnames(df_trans_i) %in% c("X","Sex", "Donor.ID","Endplate", "Age", "Disc.T2..ms_log","AgeGroup", "Disc.Pfirrmann")]
prop_names <- colnames(properties)
formula_string <- paste0("cbind(", paste(prop_names, collapse = ", "), ") ~ Age  + Disc.T2..ms_log + Sex")
form <- as.formula(formula_string)
mmr_model <- lm(form, data = df_trans_i)
model_summary <- summary(mmr_model)
all_overall_pvals <- data.frame()
# Loop through all models and extract overall F-test p-values
for (model_name in names(model_summary)) {
model <- model_summary[[model_name]]
if (is.null(model$fstatistic)) next
# Extract F-statistic components
fstat <- as.numeric(model$fstatistic)
# Compute overall model p-value
overall_p <- pf(fstat[1], fstat[2], fstat[3], lower.tail = FALSE)
# Store in a data frame
overall_df <- data.frame(
model = model_name,
F_statistic = fstat[1],
df1 = fstat[2],
df2 = fstat[3],
p_value = overall_p
)
# Append to results
all_overall_pvals <- bind_rows(all_overall_pvals, overall_df)
}
corrected_overall_pvals <- all_overall_pvals %>%
mutate(
p_bonferroni = p.adjust(p_value, method = "bonferroni"),
p_hommel     = p.adjust(p_value, method = "hommel"),
p_fdr        = p.adjust(p_value, method = "fdr")
) %>%
mutate(
sig_bonf_0.05  = p_bonferroni < 0.05,
sig_hommel_0.05 = p_hommel < 0.05,
sig_fdr_0.01   = p_fdr < 0.01,
sig_fdr_0.05   = p_fdr < 0.05,
sig_fdr_0.3    = p_fdr < 0.3
)
# Prepare data for plotting
plot_df <- corrected_overall_pvals %>%
dplyr::select(model, p_bonferroni, p_hommel, p_fdr) %>%
pivot_longer(
cols = c(p_bonferroni, p_hommel, p_fdr),
names_to = "method",
values_to = "adj_pval"
) %>%
group_by(method) %>%
arrange(adj_pval, .by_group = TRUE) %>%
mutate(rank = row_number())  # add x-axis rank
ggplot(plot_df, aes(x = rank, y = adj_pval)) +
geom_point(size = 2.2, alpha = 0.8,) +
scale_y_log10() + # Log scale
facet_wrap(~method, ncol = 3) +
theme_minimal(base_size = 14) +
labs(title = "Multiple Hypothesis Testing: P-value Corrections",
x = "Ordering of p-values",
y = "p-values (log scale)") +
theme(legend.position = "none")  # Remove redundant legend
df <- corrected_overall_pvals %>%
dplyr::select(model, p_value) %>%
arrange(p_value) %>%
mutate(
rank = row_number(),
log_p = p_value  # for log-scale plot
)
plot_fdr_bonf <- function(df, q_level) {
m <- nrow(df)
# BH line: (rank/m) * q
df <- df %>%
mutate(
bh_threshold = (rank / m) * q_level,
is_significant = p_value <= bh_threshold
)
ggplot(df, aes(x = rank, y = p_value)) +
geom_point(aes(color = is_significant), size = 2) +
scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "black")) +
geom_abline(intercept = 0, slope = q_level / m, color = "orange", linetype = "solid") +  # BH line
geom_hline(yintercept = 0.05 / m, color = "green", linetype = "solid") +  # Bonferroni line
labs(
title = paste0("FDR q = ", q_level),
x = "Index (ordered p-values)",
y = "P-Value (log scale)"
) +
theme_minimal()
}
p1 <- plot_fdr_bonf(df, q_level = 0.01)
p2 <- plot_fdr_bonf(df, q_level = 0.1)
p3 <- plot_fdr_bonf(df, q_level = 0.3)
p1 + p2 + p3
resid_matrix <- residuals(mmr_model)
fitted_matrix <- fitted(mmr_model)
resid_df <- as.data.frame(resid_matrix)
resid_long <- melt(resid_df, variable.name = "Variable", value.name = "Residual")
# Q-Q plot
plot1 <- ggplot(resid_long, aes(sample = Residual)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~ Variable, scales = "free", ncol = 5) +
theme_minimal(base_size = 12) +
labs(title = "Q-Q Plots of Residuals by Variable")
# residuals vs Fitted
resid_df <- melt(as.data.frame(resid_matrix), variable.name = "Variable", value.name = "Residual")
fitted_df <- melt(as.data.frame(fitted_matrix), variable.name = "Variable", value.name = "Fitted")
plot_df <- cbind(resid_df, Fitted = fitted_df$Fitted)
plot2 <- ggplot(plot_df, aes(x = Fitted, y = Residual)) +
geom_point(alpha = 0.6, color = "steelblue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
facet_wrap(~ Variable, scales = "free") +
theme_minimal(base_size = 14) +
labs(title = "Residuals vs Fitted Values (All Variables)",
x = "Fitted Values",
y = "Residuals")
plot1 #Q - Q
plot2 # R vs F
apply(resid_matrix, 2, function(x) length(unique(x[is.finite(x)])))
# mvn(resid_matrix, mvnTest = "hz")
# Fail since one column highly correlated
# cor_matrix <- cor(resid_matrix, use = "pairwise.complete.obs")
# find_highly_correlated <- findCorrelation(cor_matrix, cutoff = 0.99)
# # Print which variables need removed
# print(find_highly_correlated)
# print(colnames(resid_matrix)[find_highly_correlated])
# resid_matrix_clean <- resid_matrix[, -c(33, 9)]
# mvn(resid_matrix_clean, mvnTest = "mardia")
mvn(resid_matrix, mvnTest = "mardia")
mvn(resid_matrix, mvnTest = "mardia")
View(corrected_overall_pvals)
df_s <- subset(df, Endplate == "S")
library(ggplot2)
library(car)
library(coin)
library(caret)
library(dplyr)
library(rcompanion)
library(tidyr)
library(multcomp)
library(mice)
library(mitml)
library(naniar)
library(emmeans)
library(purrr)
library(tibble)
library(patchwork)
library(mlmtools)
library(moments)
library(MVN)
library(MASS)
library(reshape2)
library(e1071)
setwd("F:/Desktop/BU/MA676/Consult/Neil")
df <- readxl::read_xlsx("Endplate_Study_Data.xlsx")
names(df) <- make.names(names(df), unique = TRUE)
df <- df[, !colnames(df) %in% c("Sample..", "Level", "Pfirrmann.Grouped", "Radius.1...13", "Radius.2...14", "Avg.Radius...15", "Avg.Thickness...16", "Thickness.STD...17", "Fracture.", "Radius.1...20", "Radius.2...21", "Avg.Radius...22", "Avg.Thickness...23", "Thickness.STD...24", "Final.Strain", "Fracture...Final.Strain", "BEP.mmol.Pen...mol.Collagen", "CEP...Relaxation.1....", "CEP...Relaxation.2....", "CEP...Relaxation.3....")]
df <- df %>%
fill(`Donor.ID`, Age, Sex, .direction = "down")
df$Donor.ID <- as.factor(df$Donor.ID)
df$Endplate <- as.factor(df$Endplate)
df$Sex <- as.factor(df$Sex)
df$Disc.Pfirrmann <- as.factor(df$Disc.Pfirrmann)
df$Age <- as.numeric(df$Age)
df <- df %>%
mutate(across(where(is.character), ~ as.numeric(na_if(., "-"))))
# options(scipen = 999)
# df_s <- subset(df, Endplate == "S")
# df_i <- subset(df, Endplate == "I")
# df_s$AgeGroup <- cut(df_s$Age,
#                    breaks = quantile(df$Age, probs = c(0, 1/3, 2/3, 1), na.rm = TRUE),
#                    labels = c("agegroup1", "agegroup2", "agegroup3"),
#                    include.lowest = TRUE)
df_s <- subset(df, Endplate == "S")
df_i <- subset(df, Endplate == "I")
# Function to detect and mask outliers using MAD
detect_and_mask_outliers_mad <- function(data, threshold = 4.5) {
outlier_indices <- list()
for (var in colnames(data)) {
x <- data[[var]]
med <- median(x, na.rm = TRUE)
mad_val <- mad(x, constant = 1.4826, na.rm = TRUE)
z_mad <- abs(x - med) / mad_val
# Find outliers
outlier_idx <- which(z_mad > threshold)
outlier_indices[[var]] <- outlier_idx
# Mask as NA
data[outlier_idx, var] <- NA
}
return(list(
masked_data = data,
individual = outlier_indices,
combined = sort(unique(unlist(outlier_indices)))
))
}
properties <- df_s[, !colnames(df_s) %in% c("X", "Sex", "Donor.ID", "Endplate", "Age", "Disc.T2..ms.", "AgeGroup", "Disc.Pfirrmann")]
# Detect and mask outliers
mad_result <- detect_and_mask_outliers_mad(properties, threshold = 5)
df_s_cleaned <- df_s
df_s_cleaned[, colnames(properties)] <- mad_result$masked_data
cat("Total masked cells:", sum(is.na(mad_result$masked_data)), "\n")
cat("Rows with any masked value:", length(mad_result$combined), "\n")
vis_miss(df_s) +
theme(
axis.text.x = element_text(angle = 90, hjust = 0, size = 8, face = "bold"),  # rotate & adjust size
axis.text.y = element_text(size = 10),                         # y-axis label size
axis.title = element_text(size = 12, face = "bold")            # axis titles
)
vis_miss(df_s_cleaned) +
theme(
axis.text.x = element_text(angle = 90, hjust = 0, size = 8, face = "bold"),  # rotate & adjust size
axis.text.y = element_text(size = 10),                         # y-axis label size
axis.title = element_text(size = 12, face = "bold")            # axis titles
)
vis_miss(df_s) +
theme(
axis.text.x = element_text(angle = 90, hjust = 0, size = 15, face = "bold"),  # rotate & adjust size
axis.text.y = element_text(size = 10),                         # y-axis label size
axis.title = element_text(size = 12, face = "bold")            # axis titles
)
vis_miss(df_s_cleaned) +
theme(
axis.text.x = element_text(angle = 90, hjust = 0, size = 15, face = "bold"),  # rotate & adjust size
axis.text.y = element_text(size = 10),                         # y-axis label size
axis.title = element_text(size = 12, face = "bold")            # axis titles
)
properties <- df_i[, !colnames(df_s) %in% c("X", "Sex", "Donor.ID", "Endplate", "Age", "Disc.T2..ms.", "AgeGroup", "Disc.Pfirrmann")]
# Detect and mask outliers
mad_result <- detect_and_mask_outliers_mad(properties, threshold = 5)
df_i_cleaned <- df_i
df_i_cleaned[, colnames(properties)] <- mad_result$masked_data
cat("Total masked cells:", sum(is.na(mad_result$masked_data)), "\n")
cat("Rows with any masked value:", length(mad_result$combined), "\n")
vis_miss(df_i) +
theme(
axis.text.x = element_text(angle = 90, hjust = 0, size = 15, face = "bold"),  # rotate & adjust size
axis.text.y = element_text(size = 10),                         # y-axis label size
axis.title = element_text(size = 12, face = "bold")            # axis titles
)
vis_miss(df_i_cleaned) +
theme(
axis.text.x = element_text(angle = 90, hjust = 0, size = 15, face = "bold"),  # rotate & adjust size
axis.text.y = element_text(size = 10),                         # y-axis label size
axis.title = element_text(size = 12, face = "bold")            # axis titles
)
# Detect and mask outliers
mad_result <- detect_and_mask_outliers_mad(properties, threshold = 5)
df_s_cleaned <- df_s
df_s_cleaned[, colnames(properties)] <- mad_result$masked_data
